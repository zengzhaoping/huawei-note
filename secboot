#!/bin/bash

PYTHON_PATH=/usr/bin/python-2.7.6/bin
MAKE_PATH=/usr/make

export ORIG_PATH=$PATH
export FIXED_PATH=$MAKE_PATH:$PYTHON_PATH:$ORIG_PATH:.

export HEXAGON_ROOT=/usr/local/Qualcomm/HEXAGON_Tools
export HEXAGON_Q6VERSION=v5
export HEXAGON_IMAGE_ENTRY=0x08400000

export INTERNAL_VERSION="LLD0058_SPF.2.0_0.3.000.2_T04C$(date +%Y%m%d%H%M)_M"
export EXTERNAL_VERSION="LLD0058.1.3_M"
export VER_IN=-DINVER=\\\"$INTERNAL_VERSION\\\"
export VER_OUT=-DOUTVER=\\\"$EXTERNAL_VERSION\\\"
echo $VER_IN
echo $VER_OUT
export BASEBAND_VER=-DEFAULT_SW_VERSION_INFO=\\\"$BASEBAND_VER\\\"

export ONLINE_USERNAME=fWX405447
export ONLINE_PASSWD=ideadoctor98_

export SECTOOL_DIR=MSM8917.LA.2.0/common/huawei_sectools
#/* BEGIN PN:DTS2016092101686,Modified by guoyulong 00367258, 2016/10/10 */
export model_id=0x003A
export msm_part=0x000560E1
export ONLINE_SERVER=rnd-signserver.huawei.com
#/* END PN:DTS2016092101686,Modified by guoyulong 00367258, 2016/10/10 */

#source ./build_scripts/Android_SetVer.sh
BUILD_ROOT_DIR=`pwd`
#MPSS_BUILD_VER_STRING=$(sed -n '/<td>MPSS.JO.2.0.*8937/p' about.html | grep '-' | cut -d '-' -f 2)
MPSS_BUILD_VER_STRING="00190"
COMMAND="$0"
ACTION="$1"
MODULE="$2"

start_banner() {
    SUB_MODULE=$1
    echo "=================================================================="
    echo "                  #####  build $SUB_MODULE start  #####           "
    echo "=================================================================="
}

success_banner() {
    SUB_MODULE=$1
    echo "=================================================================="
    echo "                 #####  build $SUB_MODULE success  #####          "
    echo "=================================================================="
}

error_banner() {
    SUB_MODULE=$1
    echo "=================================================================="
    echo "                 #####  build $SUB_MODULE error  #####            "
    echo "=================================================================="
}

MPSS_BUILD=8937.genns.prod
RPM_BUILD=AAAAANAAR
TZ_BUILD=ZALAANAA
SBL1_BUILD=LAASANAZ
DEVPROG_ID=LAADANAZ

packall_images() {
    cd ./MSM8917.LA.2.0/common/build/
    python build.py --nonhlos
    #copy_symbols
    cd $BUILD_ROOT_DIR
    do_post_process
    success_banner all
}

do_post_process() {
    cd $BUILD_ROOT_DIR

    cp -u ./BOOT.BF.3.3/boot_images/build/ms/bin/$SBL1_BUILD/sbl1.mbn ./MSM8917.LA.2.0/common/build
    cp -u ./BOOT.BF.3.3/boot_images/build/ms/bin/$DEVPROG_ID/prog_emmc_firehose_8917_ddr.mbn ./MSM8917.LA.2.0/common/build/prog_emmc_firehose.mbn
	cp -u ./LA.UM.5.6/LINUX/android/out/target/product/msm8937_64/emmc_appsboot.mbn ./MSM8917.LA.2.0/common/build
    cp -u ./RPM.BF.2.2/rpm_proc/build/ms/bin/8917/rpm.mbn  ./MSM8917.LA.2.0/common/build
    cp -u ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD/tz.mbn ./MSM8917.LA.2.0/common/build
    cp -u ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD/keymaster.mbn ./MSM8917.LA.2.0/common/build
    cp -u ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD/cmnlib.mbn ./MSM8917.LA.2.0/common/build
    cp -u ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD/cmnlib64.mbn ./MSM8917.LA.2.0/common/build
    cp -u ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD/devcfg.mbn ./MSM8917.LA.2.0/common/build
	cp -u ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD/lksecapp.mbn ./MSM8917.LA.2.0/common/build
    cp -u ./ADSP.8953.2.8.2/adsp_proc/build/dynamic_signed/8937/adspso.bin ./MSM8917.LA.2.0/common/build
    cp -u ./MSM8917.LA.2.0/common/build/gpt_both0.bin ./MSM8917.LA.2.0/common/build/partition.bin
    #python ./BOOT.BF.3.3/boot_images/core/storage/tools/ptool/ptool.py -x ./MSM8917.LA.2.0/common/config/partition_fastboot.xml -t ./MSM8917.LA.2.0/common/build/partition_fastboot/
}

build_non_hlos() {
    SUB_ACTION=$1
    SUB_MODULE=$2
    case $SUB_MODULE in
    all|"")
        build_boot $SUB_ACTION
        build_mpss $SUB_ACTION
        build_rpm $SUB_ACTION
        build_tz $SUB_ACTION
        build_wcnss $SUB_ACTION
        build_adsp $SUB_ACTION
        build_secdata $SUB_ACTION
        build_venus $SUB_ACTION
        build_cpe $SUB_ACTION
        build_dp $SUB_ACTION
        if [ "$SUB_ACTION" != "clean" ]; then
            packall_images
        fi
        ;;
    *)
        build_$SUB_MODULE $SUB_ACTION
        ;;
    esac
}

config_sign() {
    echo "Configure for sign"
    if [ "$model_id" != "" ] && [ "$msm_part" != "" ]; then
        sed -i "s/<model_id>.*/<model_id>${model_id}<\/model_id>/g"  $SECTOOL_DIR/config/8917/8917_secimage.xml
        sed -i "s/<msm_part>.*/<msm_part>${msm_part}<\/msm_part>/g"  $SECTOOL_DIR/config/8917/8917_secimage.xml
        sed -i "s/<model_id>.*/<model_id>${model_id}<\/model_id>/g"  $SECTOOL_DIR/config/8917/8917_dbgp_secimage.xml
        sed -i "s/<msm_part>.*/<msm_part>${msm_part}<\/msm_part>/g"  $SECTOOL_DIR/config/8917/8917_dbgp_secimage.xml
        line=`sed -n "/oem_product_id/=" $SECTOOL_DIR/config/8917/8917_fuseblower_USER.xml`
        line=`expr $line + 1`
        sed -i "$line {s/<value>.*<\/value>/<value>${model_id}<\/value>/}" $SECTOOL_DIR/config/8917/8917_fuseblower_USER.xml
    else
        echo "******************************************************************"
        echo "Pls make model_id= complete in line 16, model_id=0x0021 for 8917!"
        echo "******************************************************************"
        exit 1
    fi
    if [ -z "$ONLINE_SERVER" ] || [ -z "$ONLINE_USERNAME" ] || [ -z "$ONLINE_PASSWD" ]; then
        echo "******************************************************************"
        echo "Please setup ONLINE_USERNAME, ONLINE_PASSWD."
        echo "for example:"
        echo "export ONLINE_USERNAME=********"
        echo "export ONLINE_PASSWD=********"
        echo "******************************************************************"
        exit 1
    fi
}

sign_fun() {
    cd "$BUILD_ROOT_DIR"
    python $SECTOOL_DIR/sectools.py secimage -i $2/$1.mbn -c $SECTOOL_DIR/config/8917/8917_secimage.xml -o ./MSM8917.LA.2.0/common/build/image_signed -sa
    if [ -f $2/$1_original.mbn ]; then
        echo "the original image is already exist"
    else
        mv $2/$1.mbn $2/$1_original.mbn
    fi
    cp -f $3/$1.mbn $2/$1.mbn
}

build_boot() {
    BOOT_ACTION=$1
	
    #------begin sign-----------
    image_list=("sbl1                        ./BOOT.BF.3.3/boot_images/build/ms/bin/$SBL1_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/sbl1"
                "prog_emmc_firehose_8917_ddr ./BOOT.BF.3.3/boot_images/build/ms/bin/$DEVPROG_ID ./MSM8917.LA.2.0/common/build/image_signed/8917/prog_emmc_firehose_ddr"
				"emmc_appsboot            ./LA.UM.5.6/LINUX/android/out/target/product/msm8937_64 ./MSM8917.LA.2.0/common/build/image_signed/8917/appsbl")
    n_list=${#image_list[*]}     #we can get the image path from contents.xml
    echo n_list is $n_list
    for ((i=0;i<$n_list;i++));
    do
        image_name=(${image_list[$i]})
        sign_fun ${image_name[0]} ${image_name[1]} ${image_name[2]}
    done
    #------end sign-----------
}

build_mpss() {
    MPSS_ACTION=$1

    #------begin sign-----------
    image_list=("qdsp6sw ./MPSS.JO.2.0/modem_proc/build/ms/bin/$MPSS_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/modem"
                "mba     ./MPSS.JO.2.0/modem_proc/build/ms/bin/$MPSS_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/mba")
    n_list=${#image_list[*]}     #we can get the image path from contents.xml
    echo n_list is $n_list
    for ((i=0;i<$n_list;i++));
    do
        image_name=(${image_list[$i]})
        sign_fun ${image_name[0]} ${image_name[1]} ${image_name[2]}
    done
    #sign mcfg image
    find MPSS.JO.2.0/modem_proc/mcfg/configs/mcfg_sw/generic/OEM -type f -name "mcfg_sw.mbn" | awk -F "mcfg_sw.mbn" '{print substr($1, 1, length($1)-1)}'| while read f1
    do
        echo $f1
        sign_fun mcfg_sw $f1 ./MSM8917.LA.2.0/common/build/image_signed/8917/mcfg_sw
        rm -rf $f1/mcfg_sw_original.mbn
    done
    #------end sign-----------
}

build_rpm() {
    RPM_ACTION=$1

    #------begin sign-----------
    image_list=("rpm ./RPM.BF.2.2/rpm_proc/build/ms/bin/8917 ./MSM8917.LA.2.0/common/build/image_signed/8917/rpm")
    n_list=${#image_list[*]}     #we can get the image path from contents.xml
    echo n_list is $n_list
    for ((i=0;i<$n_list;i++));
    do
        image_name=(${image_list[$i]})
        sign_fun ${image_name[0]} ${image_name[1]} ${image_name[2]}
    done
}

build_tz() {
    TZ_ACTION=$1

    #------begin sign-----------
    image_list=("tz        ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/qsee"        #in partion
                "devcfg    ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/devcfg"      #in partion
                "lksecapp  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/lksecapp"    #in partion
                "keymaster ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/keymaster"   #in partion
                "mdtp      ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/mdtp"        #in partion
                #"antitheft ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/antitheft"   #in NON-HLOS.bin
                "cmnlib    ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/cmnlib"    #in partion and NON-HLOS.bin
                "cmnlib64  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/cmnlib64"    #in partion and NON-HLOS.bin
                "cppf      ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/cppf"        #in NON-HLOS.bin
                "dhsecapp  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/dhsecapp"    #in NON-HLOS.bin
                #"mainfpr   ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/mainfpr"     #in NON-HLOS.bin
                #"fingerprint_fpc  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/fingerprint_fpc"  #in NON-HLOS.bin
                #"fingerprint_can_fpc  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/fingerprint_can_fpc"  #in NON-HLOS.bin
                #"fingerprint_syna ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/fingerprint_syna" #in NON-HLOS.bin
                #"hwfido    ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/hwfido"      #in NON-HLOS.bin
                "gptest    ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/gptest"      #in NON-HLOS.bin
                "isdbtmm   ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/isdbtmm"     #in NON-HLOS.bin
                "qmpsecap  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/qmpsecap"    #in NON-HLOS.bin
                #"secure_s  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/secure_s"    #in NON-HLOS.bin
                "securemm  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/securemm"    #in NON-HLOS.bin
                #"signtool  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/signtool"    #in NON-HLOS.bin
                "smplap32  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/smplap32" #in NON-HLOS.bin
                "smplap64  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/smplap64" #in NON-HLOS.bin
                #"ifaa        ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/ifaa" #in NON-HLOS.bin
                "widevine  ./TZ.BF.4.0.5/trustzone_images/build/ms/bin/$TZ_BUILD ./MSM8917.LA.2.0/common/build/image_signed/8917/widevine")   #in NON-HLOS.bin
        n_list=${#image_list[*]}     #we can get the image path from contents.xml
        echo n_list is $n_list
        for ((i=0;i<$n_list;i++));
        do
            image_name=(${image_list[$i]})
            sign_fun ${image_name[0]} ${image_name[1]} ${image_name[2]}
        done
        #------end sign-----------
}

#WCNSS image is released as a binary and no build compilation is needed.
build_wcnss() {
    echo "WCNSS image is released as a binary and no build compilation is needed."

    #------begin sign-----------
    image_list=("wcnss ./CNSS.PR.4.0/wcnss_proc/build/ms/bin/8937/reloc ./MSM8917.LA.2.0/common/build/image_signed/8917/wcnss")
    n_list=${#image_list[*]}     #we can get the image path from contents.xml
    echo n_list is $n_list
    for ((i=0;i<$n_list;i++));
    do
        image_name=(${image_list[$i]})
        sign_fun ${image_name[0]} ${image_name[1]} ${image_name[2]}
    done
    #------end sign-----------
}

build_adsp() {
    ADSP_ACTION=$1

    #------begin sign-----------
    image_list=("adsp ./ADSP.8953.2.8.2/adsp_proc/obj/8937/signed ./MSM8917.LA.2.0/common/build/image_signed/8917/adsp")
    n_list=${#image_list[*]}     #we can get the image path from contents.xml
    echo n_list is $n_list
    for ((i=0;i<$n_list;i++));
    do
        image_name=(${image_list[$i]})
        sign_fun ${image_name[0]} ${image_name[1]} ${image_name[2]}
    done
    cp -f ./ADSP.8953.2.8.2/adsp_proc/obj/8937/signed/adsp.mbn ./ADSP.8953.2.8.2/adsp_proc/obj/8937/adsp.mbn
    #------end sign-----------
}

build_secdata() {
    SECDATA_ACTION=$1
    if [ "$SECDATA_ACTION" = "build" ]; then
        echo "build secdata"
        cd "$BUILD_ROOT_DIR"
        python $SECTOOL_DIR/sectools.py fuseblower -e $SECTOOL_DIR/config/8917/8917_fuseblower_OEM.xml -q $SECTOOL_DIR/config/8917/8917_fuseblower_QC.xml -u $SECTOOL_DIR/config/8917/8917_fuseblower_USER.xml -o ./MSM8917.LA.2.0/common/build/ -gad
        cp -f ./MSM8917.LA.2.0/common/build/fuseblower_output/v2/sec.dat ./MSM8917.LA.2.0/common/build/
    else
        rm -f ./MSM8917.LA.2.0/common/build/sec.dat
        echo "clean secdata"
    fi
}

build_dp() {
    echo "start generate dp image."
    cd "$BUILD_ROOT_DIR"
    python $SECTOOL_DIR/sectools.py debugpolicy -p 8917 -ga
    cp -f $SECTOOL_DIR/debugpolicy_output/dp_AP_signed.mbn ./MSM8917.LA.2.0/common/build/apdp.mbn
    cp -f $SECTOOL_DIR/debugpolicy_output/dp_MSA_signed.mbn ./MSM8917.LA.2.0/common/build/msadp.mbn
}

build_venus() {
    echo "venus image is released as a binary and no build compilation is needed."

    #------begin sign-----------
    image_list=("venus ./VIDEO.VE_ULT.3.1/venus_proc/build/bsp/asic/build/PROD/mbn/reloc/signed ./MSM8917.LA.2.0/common/build/image_signed/8917/venus")
    n_list=${#image_list[*]}     #we can get the image path from contents.xml
    echo n_list is $n_list
    for ((i=0;i<$n_list;i++));
    do
        image_name=(${image_list[$i]})
        sign_fun ${image_name[0]} ${image_name[1]} ${image_name[2]}
    done
    #------end sign-----------
}

build_cpe() {
    echo "cpe image is released as a binary and no build compilation is needed."

    #------begin sign-----------
    image_list=("cpe_9335 ./CPE.TSF.1.0/cpe_proc/build/ms/bin/AAAAAAAA ./MSM8917.LA.2.0/common/build/image_signed/8917/cpe_9335")
    n_list=${#image_list[*]}     #we can get the image path from contents.xml
    echo n_list is $n_list
    for ((i=0;i<$n_list;i++));
    do
        image_name=(${image_list[$i]})
        sign_fun ${image_name[0]} ${image_name[1]} ${image_name[2]}
    done
    #------end sign-----------
}

help() {
    if [ -n "$ACTION" ]; then
        echo "Parameter error: $ACTION"
    fi
    echo "Usage: $COMMAND [action] [module]"
    echo "build qualcomm NON-HLOS source code."
    echo "$COMMAND build all"
    echo "$COMMAND build tz"
    echo "$COMMAND clean tz"
    echo "$COMMAND packall"
    echo -e
    echo "action: build clean help"
    echo -e
    echo "module: all boot mpss rpm tz wcnss secdata venus cpe dp"
    echo -e
}

#----must call first, in order to config sign-----------
config_sign
case $ACTION in
build|clean)
    case $MODULE in
    all|boot|mpss|rpm|tz|wcnss|adsp|secdata|venus|cpe|dp|"")
        build_non_hlos $ACTION $MODULE 2>&1 | tee build_8917_`date +%Y%m%d%H%M%S`.txt
        ;;
    *)
        help
        exit 1
        ;;
    esac
    ;;
boot|mpss|rpm|tz|wcnss|adsp|secdata|venus|cpe|dp)
    build_non_hlos build $ACTION 2>&1 | tee build_8917_`date +%Y%m%d%H%M%S`.txt
    exit 1
    ;;
packall)
    packall_images 2>&1 | tee build_8917_`date +%Y%m%d%H%M%S`.txt
    exit 1
    ;;
"")
    build_non_hlos build all 2>&1 | tee build_8917_`date +%Y%m%d%H%M%S`.txt
    exit 1
    ;;
clean)
    build_non_hlos clean all
    exit 1
    ;;
help|*)
    help
    exit 1
    ;;
esac
